// frontend/src/components/layout/Layout.tsx - –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï

'use client';
import { useState, useEffect, useMemo } from 'react';
import { useAuth } from '@/hooks/useAuth';
import Header from './Header';
import Sidebar from './Sidebar';

interface LayoutProps {
  children: React.ReactNode;
  // ‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º files –æ—Ç dashboard –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  files?: Array<{ size?: number }>;
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç-–æ–±–æ–ª–æ—á–∫–∞ (Layout), –∫–æ—Ç–æ—Ä—ã–π —Å–ª—É–∂–∏—Ç —Ç–æ—á–∫–æ–π –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
 * –¥–ª—è Header, Sidebar –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
 */
const Layout: React.FC<LayoutProps> = ({ children, files = [] }) => {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const { user } = useAuth();

  const toggleSidebar = () => {
    setIsSidebarOpen(!isSidebarOpen);
  };

  // ‚úÖ –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ storage stats
  const storageStats = useMemo(() => {
    if (!files.length) return undefined;

    const usedBytes = files.reduce((sum, file) => sum + (file.size || 0), 0);
    const totalBytes = 1 * 1024 * 1024 * 1024; // 1GB

    return {
      used: usedBytes,
      total: totalBytes
    };
  }, [files]);

  // ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤
  useEffect(() => {
    if (files.length > 0) {
      console.log(`üìä Layout: Managing ${files.length} files`);
    }
  }, [files.length]);

  return (
    <div className="flex flex-col min-h-screen">
      <Header 
        onOpenSidebar={toggleSidebar} 
        storageStats={storageStats}
      />
      
      <Sidebar open={isSidebarOpen} onClose={toggleSidebar} />

      <div className="flex flex-1">
        <main className="flex-1 p-6 bg-gray-100">
          {children}
        </main>
      </div>
    </div>
  );
};

export default Layout;