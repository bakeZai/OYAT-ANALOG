// frontend/src/lib/api.ts - –° –£–õ–£–ß–®–ï–ù–ù–´–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú

import { File, Folder } from '@/types/files';

const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api';

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
 */
export const uploadFileToApi = async (file: globalThis.File, currentFolderId: string | null, token: string) => {
  console.log('üöÄ Starting file upload:', {
    fileName: file.name,
    fileSize: file.size,
    fileType: file.type,
    currentFolderId,
    hasToken: !!token
  });

  const formData = new FormData();
  formData.append('file', file);
  if (currentFolderId) {
    formData.append('folderId', currentFolderId);
  }

  console.log('üì° Sending request to:', `${API_URL}/files/upload`);

  try {
    const response = await fetch(`${API_URL}/files/upload`, {
      method: 'POST',
      body: formData,
      headers: {
        'Authorization': `Bearer ${token}`
      },
    });

    console.log('üì® Response status:', response.status, response.statusText);

    if (!response.ok) {
      let errorData;
      try {
        errorData = await response.json();
        console.error('‚ùå Server error response:', errorData);
      } catch (parseError) {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
        const errorText = await response.text();
        console.error('‚ùå Server error (text):', errorText);
        throw new Error(`Server error ${response.status}: ${errorText}`);
      }
      throw new Error(errorData.error || errorData.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
    }

    const result = await response.json();
    console.log('‚úÖ Upload successful:', result);
    return result;

  } catch (error) {
    console.error('üí• Upload failed:', error);
    throw error;
  }
};

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
export const fetchUserFiles = async (currentFolderId: string | null, token: string): Promise<(File | Folder)[]> => {
  const params = new URLSearchParams();
  if (currentFolderId) {
    params.append('folderId', currentFolderId);
  }

  const response = await fetch(`${API_URL}/files?${params.toString()}`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    },
    cache: 'no-store',
  });

  if (!response.ok) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤. –°—Ç–∞—Ç—É—Å: ${response.status}`);
    const errorData = await response.json();
    if (response.status === 401) {
      throw new Error(`401: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.`);
    }
    if (response.status === 404) {
      throw new Error(`202: –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ.`);
    } else if (response.status >= 500) {
      throw new Error(`101: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.`);
    }
    throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤');
  }

  const { files } = await response.json();
  console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:", files);

  return files || [];
};

export const deleteFileFromApi = async (id: string, token: string) => {
  const response = await fetch(`${API_URL}/files/${id}`, {
    method: 'DELETE',
    headers: {
      'Authorization': `Bearer ${token}`
    },
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
  }

  return response.json();
};

export const renameFileInApi = async (id: string, newName: string, token: string) => {
  const response = await fetch(`${API_URL}/files/${id}`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    },
    body: JSON.stringify({ name: newName }),
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è');
  }

  return response.json();
};

export const createFolderInApi = async (folderName: string, parentFolderId: string | null, token: string) => {
  const response = await fetch(`${API_URL}/folders`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    },
    body: JSON.stringify({ name: folderName, parentId: parentFolderId }),
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏');
  }

  return response.json();
};