// app/dashboard/page.tsx - –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ü–†–û–°–ê–ú–ò

'use client';
import { useState, useCallback } from 'react';
import { useAuth } from '@/hooks/useAuth';
import { useFiles } from '@/hooks/useFiles';
import Layout from '@/components/layout/Layout';
import FileGrid from '@/components/files/FileGrid';
import FileUpload from '@/components/files/FileUpload';
import FolderManager from '@/components/files/FolderManager';
import Loading from '@/components/common/Loading';
import { Box, Button, Typography, Breadcrumbs, Link } from '@mui/material';
import { CloudUpload, CreateNewFolder } from '@mui/icons-material';

interface BreadcrumbItem {
  id: string | null;
  name: string;
}

export default function Dashboard() {
  const { user, loading: authLoading } = useAuth();
  
  // ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const [currentFolderId, setCurrentFolderId] = useState<string | null>(null);
  const [breadcrumbs, setBreadcrumbs] = useState<BreadcrumbItem[]>([
    { id: null, name: '–ì–ª–∞–≤–Ω–∞—è' }
  ]);

  // ‚úÖ –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô useFiles hook –¥–ª—è –≤—Å–µ–≥–æ dashboard
  const { 
    files, 
    loading: filesLoading, 
    error, 
    refreshFiles 
  } = useFiles(currentFolderId);

  // ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  const [uploadDialogOpen, setUploadDialogOpen] = useState(false);
  const [folderDialogOpen, setFolderDialogOpen] = useState(false);

  // ‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø–∞–ø–∫–∞–º
  const handleFolderClick = useCallback((folder: any) => {
    console.log('üìÅ Navigating to folder:', folder.name);
    setCurrentFolderId(folder.id);
    setBreadcrumbs(prev => [...prev, { id: folder.id, name: folder.name }]);
  }, []);

  // ‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ breadcrumbs
  const handleBreadcrumbClick = useCallback((targetId: string | null, index: number) => {
    console.log('üß≠ Navigating to breadcrumb:', targetId);
    setCurrentFolderId(targetId);
    setBreadcrumbs(prev => prev.slice(0, index + 1));
  }, []);

  // ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  const handleUploadSuccess = useCallback(() => {
    console.log('‚úÖ Upload successful, refreshing files...');
    refreshFiles();
  }, [refreshFiles]);

  const handleFolderCreated = useCallback(() => {
    console.log('‚úÖ Folder created, refreshing files...');
    refreshFiles();
  }, [refreshFiles]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (authLoading) {
    return (
      <Layout>
        <Loading />
      </Layout>
    );
  }

  if (!user) {
    return (
      <Layout>
        <Typography variant="h5">–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</Typography>
      </Layout>
    );
  }

  return (
    <Layout files={files}> {/* ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º files –≤ Layout –¥–ª—è storage stats */}
      <Box>
        {/* –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ */}
        <Breadcrumbs sx={{ mb: 2 }}>
          {breadcrumbs.map((crumb, index) => (
            <Link
              key={`${crumb.id}-${index}`}
              color={index === breadcrumbs.length - 1 ? 'text.primary' : 'inherit'}
              onClick={() => {
                if (index < breadcrumbs.length - 1) {
                  handleBreadcrumbClick(crumb.id, index);
                }
              }}
              sx={{ cursor: index < breadcrumbs.length - 1 ? 'pointer' : 'default' }}
            >
              {crumb.name}
            </Link>
          ))}
        </Breadcrumbs>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <Box sx={{ display: 'flex', gap: 2, mb: 3 }}>
          <Button
            variant="contained"
            startIcon={<CloudUpload />}
            onClick={() => setUploadDialogOpen(true)}
            disabled={filesLoading}
          >
            –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
          </Button>
          <Button
            variant="outlined"
            startIcon={<CreateNewFolder />}
            onClick={() => setFolderDialogOpen(true)}
            disabled={filesLoading}
          >
            –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É
          </Button>
        </Box>

        {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ */}
        {error && (
          <Typography color="error" sx={{ mb: 2 }}>
            –û—à–∏–±–∫–∞: {error}
          </Typography>
        )}

        {/* –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ */}
        {filesLoading ? (
          <Loading />
        ) : (
          <FileGrid
            files={files}
            onFolderClick={handleFolderClick}
            onRefresh={refreshFiles}
          />
        )}

        {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
        <FileUpload
          open={uploadDialogOpen}
          onClose={() => setUploadDialogOpen(false)}
          onUploadSuccess={handleUploadSuccess}
          currentFolderId={currentFolderId}
        />

        <FolderManager
          open={folderDialogOpen}
          onClose={() => setFolderDialogOpen(false)}
          onFolderCreated={handleFolderCreated}
          onCreateFolder={async (name: string) => {
            // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ FolderManager —á–µ—Ä–µ–∑ useFiles
            console.log('Creating folder:', name);
          }}
        />
      </Box>
    </Layout>
  );
}